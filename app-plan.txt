[DailyHome MESS MANAGEMENT APP - COMPLETE REFERENCE]

PROJECT OVERVIEW:
DailyHome is a comprehensive mess (shared accommodation) management system with user authentication, 
mess management, financial tracking, and reporting capabilities.

CURRENT VERSION: 2.2.0 (Real-Time WebSocket System)

TECH STACK:
- Backend: Node.js + Express
- Database: MongoDB (Mongoose ODM)
- Authentication: JWT (unlimited expiry)
- Email: Nodemailer (Gmail SMTP)
- Documentation: Swagger/OpenAPI 3.0
- Password Hashing: bcryptjs

CORE FEATURES IMPLEMENTED:

1. USER AUTHENTICATION SYSTEM:
   - User registration with email verification
   - 4-digit OTP with 3-minute expiry
   - JWT tokens with unlimited expiry (no auto-logout)
   - Password hashing with bcrypt
   - Email verification required for login
   - Unverified users can re-register (old account replaced)

2. REAL-TIME WEBSOCKET SYSTEM:
   - Professional Socket.IO implementation with authentication
   - Real-time join request status updates (accept/reject/cancel/remove)
   - Instant mess member notifications (join/leave/remove)
   - Live connection status monitoring with automatic reconnection
   - Room-based communication for efficient messaging
   - JWT token authentication for all WebSocket connections
   - Comprehensive error handling and connection health monitoring

3. MESS MANAGEMENT SYSTEM:
   - Create mess with name and address
   - Unique 6-digit identifier codes for each mess
   - Request to join mess using identifier codes (requires admin approval)
   - Admin can accept/reject member requests
   - Leave mess functionality
   - Mess admin privileges
   - One user per mess (can't join multiple)
   - Cancel join request functionality
   - Real-time WebSocket status updates
   - Professional real-time communication system

4. FINANCIAL MANAGEMENT:
   - Wallet system for each user
   - Deposit money with transaction history
   - Bazar (grocery) expense tracking
   - Meal counting and cost calculation
   - Automatic meal rate calculation
   - User-wise financial summaries

5. REPORTING SYSTEM:
   - Daily meal summaries
   - Monthly financial reports
   - User-wise expense breakdown
   - Bangladesh timezone support
   - Real-time calculations

DATABASE MODELS:

1. User Model:
   - email (unique, required)
   - password (hashed, min 6 chars)
   - fullName (required)
   - isEmailVerified (boolean)
   - otp (code, expiresAt)
   - currentMess (ObjectId ref)
   - isMessAdmin (boolean)
   - timestamps

2. Mess Model:
   - name (required)
   - address (required)
   - identifierCode (unique 6-digit)
   - admin (User ref)
   - members (array with user, joinedAt, isActive)
   - pendingRequests (array with user, requestedAt, status)
   - isActive (boolean)
   - timestamps

3. Wallet Model:
   - user (User ref)
   - mess (Mess ref)
   - amount (number)
   - type (deposit/withdrawal/meal_deduction)
   - description (string)
   - date (timestamp)

4. Bazar Model:
   - date (required)
   - cost (number)
   - description (string)
   - mess (Mess ref)
   - addedBy (User ref)
   - timestamps

5. Meal Model:
   - user (User ref)
   - mess (Mess ref)
   - date (required)
   - meals (number)
   - addedBy (User ref)
   - timestamps

6. Member Model (Legacy - for backward compatibility):
   - user (User ref)
   - mess (Mess ref)
   - name (string)
   - picture (string)
   - isActive (boolean)
   - timestamps

API ENDPOINTS:

AUTHENTICATION:
- POST /api/auth/signup - Register user (replaces unverified accounts)
- POST /api/auth/verify-otp - Verify email with OTP
- POST /api/auth/resend-otp - Resend OTP
- POST /api/auth/login - User login (unlimited token)
- GET /api/auth/me - Get user profile and state (ENHANCED)
- POST /api/auth/request-password-reset - Request password reset
- POST /api/auth/reset-password - Reset password with OTP

MESS MANAGEMENT:
- POST /api/mess - Create new mess
- GET /api/mess/search/:code - Search mess by code
- POST /api/mess/join - Request to join mess
- GET /api/mess/pending-requests - Get pending requests (admin only)
- POST /api/mess/accept-request - Accept member request (admin only)
- POST /api/mess/reject-request - Reject member request (admin only)
- POST /api/mess/leave - Leave mess
- GET /api/mess - Get mess details
- DELETE /api/mess/members/:memberId - Remove member (admin only)
- GET /api/mess/check-request-status - Check request status (WebSocket real-time) [NEW]
- POST /api/mess/cancel-request - Cancel join request [NEW]

FINANCIAL MANAGEMENT:
- GET /api/wallets - Get user wallet transactions
- POST /api/wallets - Add money to wallet
- GET /api/wallets/summary - Get mess wallet summary (admin)
- DELETE /api/wallets/:id - Delete transaction (admin)

BAZAR MANAGEMENT:
- GET /api/bazars - Get mess bazar entries
- POST /api/bazars - Add bazar entry
- DELETE /api/bazars/:id - Delete bazar entry

MEAL MANAGEMENT:
- GET /api/meals - Get mess meals
- POST /api/meals - Add meal entry
- POST /api/meals/bulk - Add multiple meals (admin)
- DELETE /api/meals/:id - Delete meal entry

REPORTS:
- GET /api/summary - Get monthly summary report

REAL-TIME WEBSOCKET SYSTEM:

1. User States:
   - No Mess State: User can create or join mess
   - Pending Request State: User waiting for admin approval
   - Mess Member State: User is active member
   - Mess Admin State: User is mess admin with privileges

2. State Flags (from /api/auth/me):
   - hasMess: User is member of a mess
   - isMessAdmin: User is mess admin
   - hasPendingRequest: User has pending join request
   - pendingRequestMess: Details of mess with pending request
   - canCreateMess: User can create new mess
   - canJoinMess: User can join existing mess
   - shouldShowDashboard: User should see main dashboard

3. Real-time WebSocket Features:
   - Instant join request status updates (accept/reject/cancel/remove)
   - Real-time mess member notifications (join/leave/remove)
   - Live connection status monitoring
   - Automatic reconnection handling
   - Room-based communication
   - JWT authentication for all connections
   - Professional error handling and health monitoring

SECURITY FEATURES:
- JWT authentication with unlimited expiry
- Password hashing with bcrypt
- Email verification with OTP
- Role-based access control (mess admin)
- Data isolation (users only see their mess data)
- Input validation and sanitization
- State-based access control

ENVIRONMENT VARIABLES REQUIRED:
- MONGO_URI=mongodb://localhost:27017/homeManagementFinal
- JWT_SECRET=your_jwt_secret_key
- EMAIL_USER=your_email@gmail.com
- EMAIL_PASS=your_app_password
- PORT=3000

KEY BUSINESS LOGIC:

1. USER REGISTRATION FLOW:
   - User signs up → OTP sent to email
   - User verifies OTP → Account activated
   - User can login → Gets unlimited JWT token
   - Unverified users can re-register (old account deleted)

2. REAL-TIME WEBSOCKET FLOW:
   - User logs in → WebSocket connection established with JWT auth
   - System determines user state based on:
     * Current mess membership
     * Pending join requests
     * Admin status
   - Frontend routes to appropriate UI based on state flags
   - Real-time WebSocket events for instant status updates
   - Automatic reconnection and connection health monitoring

3. MESS CREATION FLOW:
   - User creates mess → Becomes admin
   - Gets unique 6-digit identifier code
   - Can invite others using the code
   - Admin has additional privileges
   - Users request to join → Admin approves/rejects

4. MESS JOINING FLOW:
   - User requests to join → Pending state
   - Frontend shows waiting screen with cancel option
   - Real-time WebSocket events for instant status updates
   - If accepted → User becomes member, instantly redirected to dashboard
   - If rejected → User can try joining another mess
   - User can cancel request anytime with instant feedback

5. FINANCIAL CALCULATION:
   - Total bazar cost / Total meals = Meal rate
   - User cost = User meals × Meal rate
   - User balance = Deposits - User cost

6. DATA ISOLATION:
   - All operations scoped to user's current mess
   - Users can only access their mess data
   - Admin can manage mess members

FRONTEND INTEGRATION:

1. State-Based Routing:
   - Use /api/auth/me response to determine UI state
   - Implement state flags for conditional rendering
   - Handle all user states gracefully

2. Real-time WebSocket Updates:
   - Subscribe to WebSocket events for instant updates
   - Implement proper cleanup for WebSocket subscriptions
   - Handle status changes with smooth transitions
   - Connection status monitoring and automatic reconnection

3. Error Handling:
   - Graceful API and WebSocket error handling
   - User-friendly error messages
   - Retry mechanisms for failed connections
   - Connection health monitoring

4. Performance Optimization:
   - Cache user state appropriately
   - Efficient WebSocket event handling
   - Implement proper cleanup and memory management
   - Room-based communication for scalability

MIGRATION FROM V1:
- Removed room-based system
- Added user authentication
- Introduced mess concept
- Updated all models for user-based system
- Added comprehensive access control
- Implemented user state management
- Added professional real-time WebSocket system

FUTURE ENHANCEMENTS:
- Admin transfer functionality
- Mess statistics and analytics
- Export/import functionality
- Push notifications
- Mobile app integration
- Advanced reporting features
- Enhanced WebSocket features (file sharing, voice messages)
- Offline support with sync

DEPLOYMENT NOTES:
- Database: MongoDB (local or cloud)
- Email: Gmail SMTP with App Password
- Server: Node.js environment
- Documentation: Swagger UI at /api-docs
- State Management: Comprehensive user state system

TROUBLESHOOTING:
- Email issues: Check Gmail App Password setup
- Database issues: Verify MONGO_URI connection
- JWT issues: Ensure JWT_SECRET is set
- OTP issues: Check email configuration
- State issues: Verify user state flags
- WebSocket issues: Check connection status and authentication

This document serves as complete reference for the DailyHome app. 
When switching between Cursor accounts, provide this file to understand the current system state.
